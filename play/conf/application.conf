# https://www.playframework.com/documentation/latest/Configuration

play {
  http.secret.key="1234567890"
  http.secret.key=${?PLAY_APP_SECRET}

  akka {
    # Defining cluster akka actor system
    actor-system = "ClusterSystem"
  }

  server {
    provider = play.core.server.AkkaHttpServerProvider

    akka {
      # How long to wait when binding to the listening socket
      bindTimeout = 5 seconds

      # How long a request takes until it times out
      requestTimeout = null

      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      transparent-head-requests = off

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is the empty string and no header was included in
      # the request, no `Server` header will be rendered at all.
      server-header = ""

      # Configures the processing mode when encountering illegal characters in
      # header value of response.
      #
      # Supported mode:
      # `error`  : default mode, throw an ParsingException and terminate the processing
      # `warn`   : ignore the illegal characters in response header value and log a warning message
      # `ignore` : just ignore the illegal characters in response header value
      illegal-response-header-value-processing-mode = warn

      # This setting is set in `akka.http.server.parsing.max-content-length`
      # Play uses the concept of a `BodyParser` to enforce this limit, so we override it to infinite.
      max-content-length = infinite

      http2 {
        enabled = true
        enabled = ${?http2.enabled}
      }
    }

    # The root directory for the Play server instance. This value can
    # be set by providing a path as the first argument to the Play server
    # launcher script. See `ServerConfig.loadConfiguration`.
    dir = ${?user.dir}

    # HTTP configuration
    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 9000
      port = ${?http.port}

      # The interface address to bind to.
      address = "0.0.0.0"
      address = ${?http.address}

      # The idle timeout for an open connection after which it will be closed
      # Set to null to disable the timeout
      idleTimeout = 75 seconds

      session = {

        # The cookie name
        cookieName = "PLAY_SESSION"

        # Whether the secure attribute of the cookie should be set to true
        secure = false

        # The max age to set on the cookie.
        # If null, the cookie expires when the user closes their browser.
        # An important thing to note, this only sets when the browser will discard the cookie.
        maxAge = null

        # Whether the HTTP only attribute of the cookie should be set to true
        httpOnly = true

        # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
        sameSite = "lax"

        # The domain to set on the session cookie
        # If null, does not set a domain on the session cookie.
        domain = null

        # The session path
        # Must start with /.
        path = ${?play.http.context}

        jwt {
          # The JWT signature algorithm to use on the session cookie
          # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
          signatureAlgorithm = "HS256"

          # The time after which the session is automatically invalidated.
          # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
          expiresAfter = ${?play.http.session.maxAge}

          # The amount of clock skew to accept between servers when performing date checks
          # If you have NTP or roughtime synchronizing between servers, you can enhance
          # security by tightening this value.
          clockSkew = 5 minutes

          # The claim key under which all user data is stored in the JWT.
          dataClaim = "data"
        }
      }
    }

    # The path to the process id file created by the server when it runs.
    # If set to "/dev/null" then no pid file will be created.
    pidfile.path = ${play.server.dir}/RUNNING_PID
    pidfile.path = ${?pidfile.path}

    websocket {
      # Maximum allowable frame payload length. Setting this value to your application's
      # requirement may reduce denial of service attacks using long data frames.
      frame.maxLength = 64k
      frame.maxLength = ${?websocket.frame.maxLength}
    }
  }
}

akka {
  actor {
    provider = cluster
  }

  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }

    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552"
    ]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    # auto-down-unreachable-after = 60s
    #sharding {
    #  state-store-mode = ddata
    #}
  }

  actor.deployment {
    /factorialBackendRouter = {
      # Router type provided by metrics extension.
      router = cluster-metrics-adaptive-group
      # Router parameter specific for metrics extension.
      # metrics-selector = heap
      # metrics-selector = load
      # metrics-selector = cpu
      metrics-selector = mix
      #
      routees.paths = ["/user/flowRegistry"]
      cluster {
        enabled = on
        use-role = backend
        allow-local-routees = off
      }
    }
  }
}

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native